diff --git a/src/ShippingCalculator.tsx b/src/ShippingCalculator.tsx
index 1111111..2222222 100644
--- a/src/ShippingCalculator.tsx
+++ b/src/ShippingCalculator.tsx
@@ -1,6 +1,6 @@
 import { useState, useEffect } from 'react';
 import { Card } from '@/components/ui/card';
 import { Clock, Package, Calendar } from 'lucide-react';
+// (imports unchanged)
 import {
   Accordion,
   AccordionContent,
@@ -8,6 +8,7 @@ import {
 } from "@/components/ui/accordion";
 import { Input } from "@/components/ui/input";
 
+// --- existing config/holiday data unchanged ---
 const shippingHolidays = [
   new Date("Nov 27, 2025"),  // Thanksgiving 2025
   new Date("Dec 25, 2025"),  // Christmas 2025
@@ -39,31 +40,55 @@ function isShippingHoliday(date: Date): boolean {
   return false;
 }
 
-function getShipDate(now: Date): Date {
-  const shipDate = new Date(now);
-  shipDate.setHours(12, 0, 0, 0);
-
-  if (now.getHours() >= 12) {
-    shipDate.setDate(shipDate.getDate() + 1);
-  }
-
-  while (isShippingHoliday(shipDate) || isWeekend(shipDate)) {
-    shipDate.setDate(shipDate.getDate() + 1);
-  }
-
-  return shipDate;
-}
+/**
+ * Single source of truth: next shipping cutoff (noon ET on next business day).
+ * This replaces using getShipDate() inside the countdown tick and prevents the
+ * "total never goes negative" problem that blocked UI refreshes.
+ */
+function nextShippingCutoff(from: Date): Date {
+  const d = new Date(from);
+  d.setHours(12, 0, 0, 0);
+  if (from.getHours() >= 12) d.setDate(d.getDate() + 1);
+  while (isShippingHoliday(d) || isWeekend(d)) d.setDate(d.getDate() + 1);
+  return d;
+}
 
 function formatDate(date: Date): string {
   const dayWithSuffix = ordinalSuffix(date.getDate());
   const dayName = date.toLocaleDateString("en-US", { weekday: 'long' });
   const monthName = date.toLocaleDateString("en-US", { month: 'long' });
   return `${dayName}, ${monthName} ${dayWithSuffix}`;
 }
 
-function calculateDeliveryDate(additionalDays: number): { deliveryDate: Date; containsShippingHoliday: boolean } {
-  const now = getCurrentDate();
-  const deliveryDate = getShipDate(now);
+/**
+ * Diff helper for countdown from a fixed deadline.
+ */
+function diff(now: Date, deadline: Date): TimeLeft {
+  const t = deadline.getTime() - now.getTime();
+  const days = Math.floor(t / 86400000);
+  const hours = Math.floor((t % 86400000) / 3600000);
+  const minutes = Math.floor((t % 3600000) / 60000);
+  const seconds = Math.floor((t % 60000) / 1000);
+  return { days, hours, minutes, seconds, total: t };
+}
+
+/**
+ * Delivery date calculator that starts from a provided base ship date (the
+ * same deadline the countdown uses), keeping the whole UI in sync.
+ */
+function calculateDeliveryDateFromBase(
+  baseShipDate: Date,
+  additionalDays: number
+): { deliveryDate: Date; containsShippingHoliday: boolean } {
+  const deliveryDate = new Date(baseShipDate);
   let containsShippingHoliday = false;
 
   while (additionalDays > 0) {
     deliveryDate.setDate(deliveryDate.getDate() + 1);
     const shippingHoliday = isShippingHoliday(deliveryDate);
@@ -76,6 +101,13 @@ function calculateDeliveryDate(additionalDays: number): { deliveryDate: Date; co
 
   return { deliveryDate, containsShippingHoliday };
 }
+
+// (Optional) keep the old name around if other modules import it
+// but have it forward to the new base version using the current cutoff.
+function calculateDeliveryDate(additionalDays: number) {
+  const now = getCurrentDate();
+  return calculateDeliveryDateFromBase(nextShippingCutoff(now), additionalDays);
+}
 
 interface TimeLeft {
   days: number;
@@ -87,12 +119,17 @@ interface TimeLeft {
 }
 
 export default function ShippingCalculator() {
-  const [timeLeft, setTimeLeft] = useState<TimeLeft>({ days: 0, hours: 0, minutes: 0, seconds: 0, total: 0 });
-  const [cutoffDate, setCutoffDate] = useState<string>('');
+  // New: track the deadline/cutoff explicitly and derive everything from it.
+  const [deadline, setDeadline] = useState<Date>(() => nextShippingCutoff(getCurrentDate()));
+  const [timeLeft, setTimeLeft] = useState<TimeLeft>(() => diff(getCurrentDate(), deadline));
+  const [cutoffDate, setCutoffDate] = useState<string>(formatDate(deadline));
   const [deliveryDates, setDeliveryDates] = useState<Array<{ speed: string; label: string; date: string; hasHoliday: boolean; days: number }>>([]);
   const [showHolidayMessage, setShowHolidayMessage] = useState(false);
   const [fadeIn, setFadeIn] = useState(false);
   const [targetDate, setTargetDate] = useState<string>('');
   const [recommendation, setRecommendation] = useState<string>('');
 
-  const calculateTimeLeft = (): TimeLeft => {
-    const now = getCurrentDate();
-    const deadline = getShipDate(now);
-    const t = deadline.getTime() - now.getTime();
-
-    const days = Math.floor((t / (1000 * 60 * 60 * 24)));
-    const hours = Math.floor((t % (1000 * 60 * 60 * 24)) / (1000 * 60 * 60));
-    const minutes = Math.floor((t % (1000 * 60 * 60)) / (1000 * 60));
-    const seconds = Math.floor((t % (1000 * 60)) / 1000);
-
-    return { days, hours, minutes, seconds, total: t };
-  };
+  // Removed: calculateTimeLeft() based on a moving ship date.
 
-  const updateDeliveryDates = () => {
+  const updateDeliveryDates = (base: Date) => {
     const shippingSpeeds = [
       { speed: 'Overnight', label: '1 Business Day', days: 1 },
       { speed: '2 Day', label: '2 Business Days', days: 2 },
       { speed: '3-4 Day', label: '3-4 Business Days', days: 4 },
       { speed: '5-7 Day', label: '5-7 Business Days', days: 7 },
       { speed: '8-10 Day', label: '8-10 Business Days', days: 10 },
     ];
 
     const dates = shippingSpeeds.map(({ speed, label, days }) => {
-      const { deliveryDate, containsShippingHoliday } = calculateDeliveryDate(days);
+      const { deliveryDate, containsShippingHoliday } = calculateDeliveryDateFromBase(base, days);
       return {
         speed,
         label,
         date: formatDate(deliveryDate),
         hasHoliday: containsShippingHoliday,
         days,
       };
     });
 
     setDeliveryDates(dates);
     setShowHolidayMessage(dates.some(d => d.hasHoliday));
   };
@@ -142,46 +179,49 @@ export default function ShippingCalculator() {
     const shipDate = getShipDate(now);
 
     if (target <= shipDate) {
       setRecommendation('Please select a future delivery date.');
       return;
     }
@@ -216,32 +256,39 @@ export default function ShippingCalculator() {
     }
   };
 
-  useEffect(() => {
-    const updateCutoffDate = () => {
-      const now = getCurrentDate();
-      const orderBeforeDate = getShipDate(now);
-      setCutoffDate(formatDate(orderBeforeDate));
-    };
-
-    updateCutoffDate();
-    updateDeliveryDates();
-    setFadeIn(true);
-
-    const interval = setInterval(() => {
-      const newTimeLeft = calculateTimeLeft();
-      
-      if (newTimeLeft.total < 0) {
-        setFadeIn(false);
-        setTimeout(() => {
-          updateCutoffDate();
-          updateDeliveryDates();
-          setTimeLeft(calculateTimeLeft());
-          setFadeIn(true);
-        }, 300);
-      } else {
-        setTimeLeft(newTimeLeft);
-      }
-    }, 1000);
-
-    return () => clearInterval(interval);
-  }, []);
+  useEffect(() => {
+    // initial render
+    updateDeliveryDates(deadline);
+    setFadeIn(true);
+
+    const interval = setInterval(() => {
+      const now = getCurrentDate();
+      const newDeadline = nextShippingCutoff(now);
+
+      // tick countdown against *current* deadline
+      setTimeLeft(diff(now, newDeadline));
+
+      // detect rollover (e.g., noon or after weekend/holiday)
+      if (newDeadline.getTime() !== deadline.getTime()) {
+        setFadeIn(false);
+        setTimeout(() => {
+          setDeadline(newDeadline);
+          setCutoffDate(formatDate(newDeadline));
+          updateDeliveryDates(newDeadline);
+          setFadeIn(true);
+        }, 300);
+      }
+    }, 1000);
+
+    return () => clearInterval(interval);
+  }, [deadline]);
 
   const TimeSegment = ({ value, label }: { value: number; label: string }) => (
     <div className="flex flex-col items-center gap-1" data-testid={`countdown-${label.toLowerCase()}`}>
       <div className="text-5xl font-bold text-primary tabular-nums min-w-[80px] text-center" data-testid={`text-${label.toLowerCase()}`}>
         {value}
       </div>
       <div className="text-sm font-medium text-muted-foreground uppercase tracking-wider" data-testid={`label-${label.toLowerCase()}`}>
         {value === 1 ? label.slice(0, -1) : label}
       </div>
     </div>
   );
 
-  const showDays = timeLeft.days >= 1;
-  const showHours = timeLeft.hours >= 1 || timeLeft.days > 0;
-  const showSeconds = timeLeft.days === 0;
+  // UX tweak:
+  // - If >= 1 day left: show only Days and Minutes (minutes fixed to 0 for clarity).
+  // - If < 1 day: show Hours, Minutes, Seconds as usual.
+  const showDays = timeLeft.days >= 1;
+  const showHours = timeLeft.days === 0 && timeLeft.hours >= 1;
+  const showSeconds = timeLeft.days === 0;
+  const minutesDisplay = timeLeft.days > 0 ? 0 : timeLeft.minutes;
 
   return (
     <div className="min-h-screen bg-background p-4">
@@ -261,7 +308,7 @@ export default function ShippingCalculator() {
               <div className="flex items-center justify-center gap-2 flex-wrap">
                 {showDays && <TimeSegment value={timeLeft.days} label="Days" />}
-                {showHours && <TimeSegment value={timeLeft.hours} label="Hours" />}
-                <TimeSegment value={timeLeft.minutes} label="Minutes" />
+                {showHours && <TimeSegment value={timeLeft.hours} label="Hours" />}
+                <TimeSegment value={minutesDisplay} label="Minutes" />
                 {showSeconds && <TimeSegment value={timeLeft.seconds} label="Seconds" />}
               </div>
             </div>
